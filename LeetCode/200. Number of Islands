Problem Link: https://leetcode.com/problems/number-of-islands/

class Solution {
    public int numIslands(char[][] grid) {
        int ans = 0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1'){
                    ans++;
                    pair p = new pair(i,j);
                    // dfs(i,j, grid);
                    bfs(p,grid);
                }
            }
        }
        return ans;
    }
    public void dfs(int i,int j,char[][]grid){
        if(i>=grid.length || j>=grid[0].length|| i<0 || j<0 || grid[i][j]!='1'){
            return;
        }
        grid[i][j] = '2';
        dfs(i+1,j,grid);
        dfs(i-1,j,grid);
        dfs(i,j+1,grid);
        dfs(i,j-1,grid);
    }
    public void bfs(pair p,char[][]grid){
        Queue<pair> q = new LinkedList<>();
        q.add(p);
        grid[p.x][p.y] = '2';
        while(!q.isEmpty()){
            pair curr = q.remove();
            int x = curr.x;
            int y = curr.y;
            if((x+1) >= 0 && (x+1) <grid.length && y>=0 && y<grid[0].length && grid[x+1][y] == '1'){
                pair nw = new pair(x+1,y);
                q.add(nw);
                grid[x+1][y] = '2';
            }
            if((x-1) >= 0 && (x-1) <grid.length && y>=0 && y<grid[0].length&& grid[x-1][y] == '1'){
                pair nw = new pair(x-1,y);
                q.add(nw);
                 grid[x-1][y] = '2';
            }
            if((x) >= 0 && (x) <grid.length && (y+1)>=0 && (y+1)<grid[0].length&& grid[x][y+1] == '1'){
                pair nw = new pair(x,y+1);
                q.add(nw);
                 grid[x][y+1] = '2';
            }
            if((x) >= 0 && (x) <grid.length && (y-1)>=0 && (y-1)<grid[0].length&&grid[x][y-1] == '1'){
                pair nw = new pair(x,y-1);
                q.add(nw);
                grid[x][y-1] = '2';
            }
        }
    }
}
class pair{
    int x;
    int y;
    public pair(int x,int y){
        this.x = x;
        this.y = y;
    }
}

Approach: 
Using 
DFS - Recursion
BFS - Queue